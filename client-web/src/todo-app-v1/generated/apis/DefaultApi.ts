/* tslint:disable */
/* eslint-disable */
/**
 * TodoAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  BadRequest,
  BadRequestFromJSON,
  BadRequestToJSON,
  CreateTodoIntent,
  CreateTodoIntentFromJSON,
  CreateTodoIntentToJSON,
  Forbidden,
  ForbiddenFromJSON,
  ForbiddenToJSON,
  NotFound,
  NotFoundFromJSON,
  NotFoundToJSON,
  NotImplemented,
  NotImplementedFromJSON,
  NotImplementedToJSON,
  ServerError,
  ServerErrorFromJSON,
  ServerErrorToJSON,
  Todo,
  TodoFromJSON,
  TodoToJSON,
  TodoList,
  TodoListFromJSON,
  TodoListToJSON,
  Unauthorized,
  UnauthorizedFromJSON,
  UnauthorizedToJSON,
} from '../models';

export interface CreateTODORequest {
  createTodoIntent: CreateTodoIntent;
}

export interface DeleteTODORequest {
  todoId: number;
}

export interface ShowTODORequest {
  todoId: number;
}

export interface UpdateTODORequest {
  todoId: number;
  todo: Todo;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   * create TODO item
   */
  async createTODORaw(
    requestParameters: CreateTODORequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Todo>> {
    if (requestParameters.createTodoIntent === null || requestParameters.createTodoIntent === undefined) {
      throw new runtime.RequiredError(
        'createTodoIntent',
        'Required parameter requestParameters.createTodoIntent was null or undefined when calling createTODO.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/todos`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: CreateTodoIntentToJSON(requestParameters.createTodoIntent),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TodoFromJSON(jsonValue));
  }

  /**
   * create TODO item
   */
  async createTODO(
    requestParameters: CreateTODORequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Todo> {
    const response = await this.createTODORaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * delete todoItem
   */
  async deleteTODORaw(
    requestParameters: DeleteTODORequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.todoId === null || requestParameters.todoId === undefined) {
      throw new runtime.RequiredError(
        'todoId',
        'Required parameter requestParameters.todoId was null or undefined when calling deleteTODO.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/todos/{todoId}`.replace(`{${'todoId'}}`, encodeURIComponent(String(requestParameters.todoId))),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * delete todoItem
   */
  async deleteTODO(
    requestParameters: DeleteTODORequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<void> {
    await this.deleteTODORaw(requestParameters, initOverrides);
  }

  /**
   * get list of TODOs
   */
  async listTODORaw(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<TodoList>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/todos`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TodoListFromJSON(jsonValue));
  }

  /**
   * get list of TODOs
   */
  async listTODO(initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<TodoList> {
    const response = await this.listTODORaw(initOverrides);
    return await response.value();
  }

  /**
   * get TODO by id
   */
  async showTODORaw(
    requestParameters: ShowTODORequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Todo>> {
    if (requestParameters.todoId === null || requestParameters.todoId === undefined) {
      throw new runtime.RequiredError(
        'todoId',
        'Required parameter requestParameters.todoId was null or undefined when calling showTODO.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const response = await this.request(
      {
        path: `/todos/{todoId}`.replace(`{${'todoId'}}`, encodeURIComponent(String(requestParameters.todoId))),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters,
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TodoFromJSON(jsonValue));
  }

  /**
   * get TODO by id
   */
  async showTODO(
    requestParameters: ShowTODORequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Todo> {
    const response = await this.showTODORaw(requestParameters, initOverrides);
    return await response.value();
  }

  /**
   * update todoItem
   */
  async updateTODORaw(
    requestParameters: UpdateTODORequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<runtime.ApiResponse<Todo>> {
    if (requestParameters.todoId === null || requestParameters.todoId === undefined) {
      throw new runtime.RequiredError(
        'todoId',
        'Required parameter requestParameters.todoId was null or undefined when calling updateTODO.',
      );
    }

    if (requestParameters.todo === null || requestParameters.todo === undefined) {
      throw new runtime.RequiredError(
        'todo',
        'Required parameter requestParameters.todo was null or undefined when calling updateTODO.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request(
      {
        path: `/todos/{todoId}`.replace(`{${'todoId'}}`, encodeURIComponent(String(requestParameters.todoId))),
        method: 'PATCH',
        headers: headerParameters,
        query: queryParameters,
        body: TodoToJSON(requestParameters.todo),
      },
      initOverrides,
    );

    return new runtime.JSONApiResponse(response, (jsonValue) => TodoFromJSON(jsonValue));
  }

  /**
   * update todoItem
   */
  async updateTODO(
    requestParameters: UpdateTODORequest,
    initOverrides?: RequestInit | runtime.InitOverideFunction,
  ): Promise<Todo> {
    const response = await this.updateTODORaw(requestParameters, initOverrides);
    return await response.value();
  }
}
