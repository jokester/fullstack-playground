/* tslint:disable */
/* eslint-disable */
/**
 * User Todos
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import {
  CreateTodoRequest,
  CreateTodoRequestFromJSON,
  CreateTodoRequestToJSON,
  CreateUserRequest,
  CreateUserRequestFromJSON,
  CreateUserRequestToJSON,
  CreateUserResponse,
  CreateUserResponseFromJSON,
  CreateUserResponseToJSON,
  ListTodoResponse,
  ListTodoResponseFromJSON,
  ListTodoResponseToJSON,
  LoginRequest,
  LoginRequestFromJSON,
  LoginRequestToJSON,
  LoginResponse,
  LoginResponseFromJSON,
  LoginResponseToJSON,
  NotFound,
  NotFoundFromJSON,
  NotFoundToJSON,
  TodoItem,
  TodoItemFromJSON,
  TodoItemToJSON,
  Unauthenticated,
  UnauthenticatedFromJSON,
  UnauthenticatedToJSON,
  Unauthorized,
  UnauthorizedFromJSON,
  UnauthorizedToJSON,
  UserProfile,
  UserProfileFromJSON,
  UserProfileToJSON,
} from '../models';

export interface DeleteUserTodoApiUsersUseridTodosTodoidRequest {
  userId: number;
  todoId: number;
}

export interface GetUserTodoApiUsersUseridTodosRequest {
  userId: number;
}

export interface PatchUserTodoApiUsersUseridTodosTodoidRequest {
  userId: number;
  todoId: number;
  todoItem: TodoItem;
}

export interface PostUserTodoApiAuthLoginRequest {
  loginRequest: LoginRequest;
}

export interface PostUserTodoApiUsersRequest {
  createUserRequest: CreateUserRequest;
}

export interface PostUserTodoApiUsersUseridTodosRequest {
  userId: number;
  createTodoRequest: CreateTodoRequest;
}

export interface PutUserTodoApiUsersUseridProfileRequest {
  userId: number;
  userProfile: UserProfile;
}

/**
 *
 */
export class DefaultApi extends runtime.BaseAPI {
  /**
   */
  async deleteUserTodoApiUsersUseridTodosTodoidRaw(
    requestParameters: DeleteUserTodoApiUsersUseridTodosTodoidRequest,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling deleteUserTodoApiUsersUseridTodosTodoid.',
      );
    }

    if (requestParameters.todoId === null || requestParameters.todoId === undefined) {
      throw new runtime.RequiredError(
        'todoId',
        'Required parameter requestParameters.todoId was null or undefined when calling deleteUserTodoApiUsersUseridTodosTodoid.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === 'function' ? token('httpAuth', []) : token;

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/user_todo_api/users/{userId}/todos/{todoId}`
        .replace(`{${'userId'}}`, encodeURIComponent(String(requestParameters.userId)))
        .replace(`{${'todoId'}}`, encodeURIComponent(String(requestParameters.todoId))),
      method: 'DELETE',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.VoidApiResponse(response);
  }

  /**
   */
  async deleteUserTodoApiUsersUseridTodosTodoid(
    requestParameters: DeleteUserTodoApiUsersUseridTodosTodoidRequest,
  ): Promise<void> {
    await this.deleteUserTodoApiUsersUseridTodosTodoidRaw(requestParameters);
  }

  /**
   */
  async getUserTodoApiUsersUseridTodosRaw(
    requestParameters: GetUserTodoApiUsersUseridTodosRequest,
  ): Promise<runtime.ApiResponse<ListTodoResponse>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling getUserTodoApiUsersUseridTodos.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === 'function' ? token('httpAuth', []) : token;

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/user_todo_api/users/{userId}/todos`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(requestParameters.userId)),
      ),
      method: 'GET',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => ListTodoResponseFromJSON(jsonValue));
  }

  /**
   */
  async getUserTodoApiUsersUseridTodos(
    requestParameters: GetUserTodoApiUsersUseridTodosRequest,
  ): Promise<ListTodoResponse> {
    const response = await this.getUserTodoApiUsersUseridTodosRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async patchUserTodoApiUsersUseridTodosTodoidRaw(
    requestParameters: PatchUserTodoApiUsersUseridTodosTodoidRequest,
  ): Promise<runtime.ApiResponse<TodoItem>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling patchUserTodoApiUsersUseridTodosTodoid.',
      );
    }

    if (requestParameters.todoId === null || requestParameters.todoId === undefined) {
      throw new runtime.RequiredError(
        'todoId',
        'Required parameter requestParameters.todoId was null or undefined when calling patchUserTodoApiUsersUseridTodosTodoid.',
      );
    }

    if (requestParameters.todoItem === null || requestParameters.todoItem === undefined) {
      throw new runtime.RequiredError(
        'todoItem',
        'Required parameter requestParameters.todoItem was null or undefined when calling patchUserTodoApiUsersUseridTodosTodoid.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === 'function' ? token('httpAuth', []) : token;

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/user_todo_api/users/{userId}/todos/{todoId}`
        .replace(`{${'userId'}}`, encodeURIComponent(String(requestParameters.userId)))
        .replace(`{${'todoId'}}`, encodeURIComponent(String(requestParameters.todoId))),
      method: 'PATCH',
      headers: headerParameters,
      query: queryParameters,
      body: TodoItemToJSON(requestParameters.todoItem),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => TodoItemFromJSON(jsonValue));
  }

  /**
   */
  async patchUserTodoApiUsersUseridTodosTodoid(
    requestParameters: PatchUserTodoApiUsersUseridTodosTodoidRequest,
  ): Promise<TodoItem> {
    const response = await this.patchUserTodoApiUsersUseridTodosTodoidRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async postUserTodoApiAuthLoginRaw(
    requestParameters: PostUserTodoApiAuthLoginRequest,
  ): Promise<runtime.ApiResponse<LoginResponse>> {
    if (requestParameters.loginRequest === null || requestParameters.loginRequest === undefined) {
      throw new runtime.RequiredError(
        'loginRequest',
        'Required parameter requestParameters.loginRequest was null or undefined when calling postUserTodoApiAuthLogin.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/user_todo_api/auth/login`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: LoginRequestToJSON(requestParameters.loginRequest),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
  }

  /**
   */
  async postUserTodoApiAuthLogin(requestParameters: PostUserTodoApiAuthLoginRequest): Promise<LoginResponse> {
    const response = await this.postUserTodoApiAuthLoginRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async postUserTodoApiAuthRefreshTokenRaw(): Promise<runtime.ApiResponse<LoginResponse>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === 'function' ? token('httpAuth', []) : token;

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/user_todo_api/auth/refresh_token`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => LoginResponseFromJSON(jsonValue));
  }

  /**
   */
  async postUserTodoApiAuthRefreshToken(): Promise<LoginResponse> {
    const response = await this.postUserTodoApiAuthRefreshTokenRaw();
    return await response.value();
  }

  /**
   */
  async postUserTodoApiUsersRaw(
    requestParameters: PostUserTodoApiUsersRequest,
  ): Promise<runtime.ApiResponse<CreateUserResponse>> {
    if (requestParameters.createUserRequest === null || requestParameters.createUserRequest === undefined) {
      throw new runtime.RequiredError(
        'createUserRequest',
        'Required parameter requestParameters.createUserRequest was null or undefined when calling postUserTodoApiUsers.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    const response = await this.request({
      path: `/user_todo_api/users`,
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateUserRequestToJSON(requestParameters.createUserRequest),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => CreateUserResponseFromJSON(jsonValue));
  }

  /**
   */
  async postUserTodoApiUsers(requestParameters: PostUserTodoApiUsersRequest): Promise<CreateUserResponse> {
    const response = await this.postUserTodoApiUsersRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async postUserTodoApiUsersUseridTodosRaw(
    requestParameters: PostUserTodoApiUsersUseridTodosRequest,
  ): Promise<runtime.ApiResponse<TodoItem>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling postUserTodoApiUsersUseridTodos.',
      );
    }

    if (requestParameters.createTodoRequest === null || requestParameters.createTodoRequest === undefined) {
      throw new runtime.RequiredError(
        'createTodoRequest',
        'Required parameter requestParameters.createTodoRequest was null or undefined when calling postUserTodoApiUsersUseridTodos.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === 'function' ? token('httpAuth', []) : token;

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/user_todo_api/users/{userId}/todos`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(requestParameters.userId)),
      ),
      method: 'POST',
      headers: headerParameters,
      query: queryParameters,
      body: CreateTodoRequestToJSON(requestParameters.createTodoRequest),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => TodoItemFromJSON(jsonValue));
  }

  /**
   */
  async postUserTodoApiUsersUseridTodos(requestParameters: PostUserTodoApiUsersUseridTodosRequest): Promise<TodoItem> {
    const response = await this.postUserTodoApiUsersUseridTodosRaw(requestParameters);
    return await response.value();
  }

  /**
   */
  async putUserTodoApiUsersUseridProfileRaw(
    requestParameters: PutUserTodoApiUsersUseridProfileRequest,
  ): Promise<runtime.ApiResponse<UserProfile>> {
    if (requestParameters.userId === null || requestParameters.userId === undefined) {
      throw new runtime.RequiredError(
        'userId',
        'Required parameter requestParameters.userId was null or undefined when calling putUserTodoApiUsersUseridProfile.',
      );
    }

    if (requestParameters.userProfile === null || requestParameters.userProfile === undefined) {
      throw new runtime.RequiredError(
        'userProfile',
        'Required parameter requestParameters.userProfile was null or undefined when calling putUserTodoApiUsersUseridProfile.',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = typeof token === 'function' ? token('httpAuth', []) : token;

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request({
      path: `/user_todo_api/users/{userId}/profile`.replace(
        `{${'userId'}}`,
        encodeURIComponent(String(requestParameters.userId)),
      ),
      method: 'PUT',
      headers: headerParameters,
      query: queryParameters,
      body: UserProfileToJSON(requestParameters.userProfile),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
  }

  /**
   */
  async putUserTodoApiUsersUseridProfile(
    requestParameters: PutUserTodoApiUsersUseridProfileRequest,
  ): Promise<UserProfile> {
    const response = await this.putUserTodoApiUsersUseridProfileRaw(requestParameters);
    return await response.value();
  }
}
